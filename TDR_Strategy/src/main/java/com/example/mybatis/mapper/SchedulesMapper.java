package com.example.mybatis.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.springframework.stereotype.Repository;

import com.example.domain.Schedules;
import com.example.domain.SchedulesExample;

@Repository
@Mapper
public interface SchedulesMapper {
	//追加
	@Select({
	    "select * from schedules"
	})
	List<Schedules> selectAll();
	
	@Select({
	    "select * from schedules where user_id = #{user_id}"
	})
	List<Schedules> selectAllByUserId(Integer user_id);
	
	@Select({
	    "SELECT s.*",
	    "FROM schedules s",
	    "INNER JOIN bookmarks b ON s.id = b.schedule_id",
	    "WHERE b.user_id = #{user_id}"
	})
	List<Schedules> selectBookmarksByUserId(Integer user_id);
	
	@Select({
	    "select * from schedules where id = #{id}"
	})
	List<Schedules> selectById(Integer id);
	
	@Select({
	    "select user_id from schedules where id = #{id}"
	})
	Integer selectUserIdById(Integer id);
	
	//すべての項目で検索
	@Select({
		"SELECT s.*",
		"FROM schedules s",
		"JOIN relationships r ON s.id = r.schedule_id",
		"JOIN use_scenes u ON r.use_scene_id = u.id",
		"WHERE u.id IN (${useScenesList})",
		"  AND s.schedule LIKE '%${searchWord}%'",
		"  AND s.park = ${park}",
		"  AND s.holiday = ${holiday}",
		"GROUP BY s.id",
		"HAVING COUNT(DISTINCT u.id) = ${useScenesCount}"
	})
	List<Schedules> searchSchedulesAll(String useScenesList, String searchWord, Integer park, Boolean holiday, Integer useScenesCount);
	
	//holidayが未入力
	@Select({
		"SELECT s.*",
		"FROM schedules s",
		"JOIN relationships r ON s.id = r.schedule_id",
		"JOIN use_scenes u ON r.use_scene_id = u.id",
		"WHERE u.id IN (${useScenesList})",
		"  AND s.schedule LIKE '% ${searchWord} %'",
		"  AND s.park = ${park}",
		"GROUP BY s.id",
		"HAVING COUNT(DISTINCT u.id) = ${useScenesCount}"
	})
	List<Schedules> searchSchedulesUP(String useScenesList, String searchWord, Integer park, Integer useScenesCount);
	
	//parkが未入力
	@Select({
		"SELECT s.*",
		"FROM schedules s",
		"JOIN relationships r ON s.id = r.schedule_id",
		"JOIN use_scenes u ON r.use_scene_id = u.id",
		"WHERE u.id IN (${useScenesList})",
		"  AND s.schedule LIKE '%${searchWord}%'",
		"  AND s.holiday = ${holiday}",
		"GROUP BY s.id",
		"HAVING COUNT(DISTINCT u.id) = ${useScenesCount}"
	})
	List<Schedules> searchSchedulesUH(String useScenesList, String searchWord, Boolean holiday, Integer useScenesCount);
	
	//useSceneが未選択
	@Select({
		"SELECT *",
		"FROM schedules",
		"WHERE schedule LIKE '%${searchWord}%'",
		"  AND park = ${park}",
		"  AND holiday = ${holiday}"
	})
	List<Schedules> searchSchedulesPH(String searchWord, Integer park, Boolean holiday);
	
	//holidayとparkが未入力
	@Select({
		"SELECT s.*",
		"FROM schedules s",
		"JOIN relationships r ON s.id = r.schedule_id",
		"JOIN use_scenes u ON r.use_scene_id = u.id",
		"WHERE u.id IN (${useScenesList})",
		"  AND s.schedule LIKE '%${searchWord}%'",
		"GROUP BY s.id",
		"HAVING COUNT(DISTINCT u.id) = ${useScenesCount}"
	})
	List<Schedules> searchSchedulesU(String useScenesList, String searchWord, Integer useScenesCount);
	
	//holidayとuseSceneが未入力
	@Select({
		"SELECT *",
		"FROM schedules",
		"WHERE schedule LIKE '%${searchWord}%'",
		"  AND park = ${park}",
	})
	List<Schedules> searchSchedulesP(String searchWord, Integer park);
	
	//parkとuseSceneが未入力
	@Select({
		"SELECT *",
		"FROM schedules",
		"WHERE schedule LIKE '%${searchWord}%'",
		"  AND holiday = ${holiday}"
	})
	List<Schedules> searchSchedulesH(String searchWord, Boolean holiday);
	
	//検索ワードのみ（検索ワードが未入力の場合は全検索）
	@Select({
		"SELECT *",
		"FROM schedules",
		"WHERE schedule LIKE '%${searchWord}%'"
	})
	List<Schedules> searchSchedulesW(String searchWord);
	
	//ここまで
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    long countByExample(SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int deleteByExample(SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    @Delete({
        "delete from schedules",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    @Insert({
        "insert into schedules (id, user_id, ",
        "date, park, holiday, ",
        "schedule)",
        "values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, ",
        "#{date,jdbcType=DATE}, #{park,jdbcType=INTEGER}, #{holiday,jdbcType=BIT}, ",
        "#{schedule,jdbcType=LONGVARCHAR})"
    })
    int insert(Schedules row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int insertSelective(Schedules row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    List<Schedules> selectByExampleWithBLOBs(SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    List<Schedules> selectByExample(SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    @Select({
        "select",
        "id, user_id, date, park, holiday, schedule",
        "from schedules",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("com.example.mybatis.mapper.SchedulesMapper.ResultMapWithBLOBs")
    Schedules selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int updateByExampleSelective(@Param("row") Schedules row, @Param("example") SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int updateByExampleWithBLOBs(@Param("row") Schedules row, @Param("example") SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int updateByExample(@Param("row") Schedules row, @Param("example") SchedulesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    int updateByPrimaryKeySelective(Schedules row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    @Update({
        "update schedules",
        "set user_id = #{userId,jdbcType=INTEGER},",
          "date = #{date,jdbcType=DATE},",
          "park = #{park,jdbcType=INTEGER},",
          "holiday = #{holiday,jdbcType=BIT},",
          "schedule = #{schedule,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(Schedules row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table schedules
     *
     * @mbg.generated Thu Jun 08 09:58:52 JST 2023
     */
    @Update({
        "update schedules",
        "set user_id = #{userId,jdbcType=INTEGER},",
          "date = #{date,jdbcType=DATE},",
          "park = #{park,jdbcType=INTEGER},",
          "holiday = #{holiday,jdbcType=BIT}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Schedules row);
}